package poo;

import java.util.Date;
import java.util.GregorianCalendar;

public class Uso_Empleado {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		/*
		Empleado empleado1 = new Empleado("Pablo Gomez", 85000, 1990, 12, 17);
		Empleado empleado2 = new Empleado("Ana Lopez", 95000, 1995, 06, 02);
		Empleado empleado3 = new Empleado("Maria Martin", 105000, 2002, 03, 15);

		
		empleado1.subeSueldo(5);
		empleado2.subeSueldo(5);
		empleado3.subeSueldo(5);
		
		System.out.println("Nombre: " + empleado1.dameNombre()
		 + " Sueldo: " + empleado1.dameSueldo()
		 + " Fecha de Alta: " + empleado1.dameFechaContrato());
		
		System.out.println("Nombre: " + empleado2.dameNombre()
		 + " Sueldo: " + empleado2.dameSueldo()
		 + " Fecha de Alta: " + empleado2.dameFechaContrato());
		
		System.out.println("Nombre: " + empleado3.dameNombre()
		 + " Sueldo: " + empleado3.dameSueldo()
		 + " Fecha de Alta: " + empleado3.dameFechaContrato());
		 */
		
		
		Jefatura jefe_RRHH = new Jefatura("Gaston", 55000, 2023, 9, 25);
		jefe_RRHH.estableceIncentivo(2570);
		
		
		Empleado[] misEmpleados = new Empleado[8];
		misEmpleados[0] = new Empleado("Pablo Gomez", 85000, 1990, 12, 17);
		misEmpleados[1] = new Empleado("Ana Lopez", 95000, 1995, 06, 02);
		misEmpleados[2] = new Empleado("Maria Martin", 105000, 2002, 03, 15);
		misEmpleados[3] = new Empleado("Facundo Luna");
		misEmpleados[4] = jefe_RRHH; // Poliformismo en accion, principio de sustitucion. Espera un objeto Empleado, almaceno un Jefe
		misEmpleados[5] = new Jefatura("Maria", 95000, 1999, 05, 26);
		
		/*
		for (int i = 0; i < 3; i++) {
			misEmpleados[i].subeSueldo(5);
		}
		*/
		
		for (Empleado e: misEmpleados) {
			e.subeSueldo(5);
		}
		
		/*
		for (int i = 0; i < 3; i++) {
			System.out.println("Nombre: " + misEmpleados[i].dameNombre()
			 + " Sueldo: " + misEmpleados[i].dameSueldo()
			  + " Fecha de Alta: " + misEmpleados[i].dameFechaContrato());
		}
		*/
		
		// AcÃ¡ llamo al dameSueldo() de la clase Empleado, poliformismo en accion
		for (Empleado e: misEmpleados) {
			System.out.println("Nombre: " + e.dameNombre()
			+ " Sueldo: " + e.dameSueldo()
			+ " Fecha Alta: " + e.dameFechaContrato());
		}
		
	}

}


class Empleado {
	public Empleado(String nom, double sue, int year, int month, int day) {
		nombre = nom;
		sueldo = sue;
		GregorianCalendar calendario = new GregorianCalendar(year, month - 1, day);
		
		altaContrato = calendario.getTime();
		
		++IdSiguiente;
		Id = IdSiguiente;
	}
	
	public Empleado(String nom) {
		this(nom, 30000, 2000, 01, 01); // Busca el constructor con igual cantidad de parametros
	}
	
	public String dameNombre() {
		return nombre + " Id: " + Id;
	}
	
	public double dameSueldo() {
		return sueldo;
	}
	
	public Date dameFechaContrato() {
		return altaContrato;
	}
	
	public void subeSueldo(double porcentaje) {
		double aumento = sueldo*porcentaje/100;
		sueldo += aumento;
	}
	
	private String nombre;
	private double sueldo;
	private Date altaContrato;
	private static int IdSiguiente;
	private int Id;
}

	class Jefatura extends Empleado {
		public Jefatura(String nom, double sue, int year, int month, int day) {
			super(nom, sue, year, month, day);
		}
		
		public void estableceIncentivo(double b) {
			incentivo = b;
		}
		
		public double dameSueldo() {
			double sueldoJefe = super.dameSueldo();
			return sueldoJefe + incentivo;
		}
		
		private double incentivo;
	}